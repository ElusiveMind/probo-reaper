#! /usr/bin/env node
'use strict';

var path = require('path');
var util = require('util');

var Loader = require('yaml-config-loader');
var yargs = require('yargs');
var loader = new Loader();

var reaper = require('../lib/reaper');

loader.on('error', function(error) {
  if (error.name === 'YAMLException') {
    console.error(util.print('Error parsing YAML file `', error.filePath, '`:', error.reason));
    console.log(error);
  }
});



let argv = yargs
    .help('help')
    .option('config', {
      describe: 'A YAML config file or directory of yaml files to load, can be invoked multiple times and later files will override earlier.',
      alias: 'c',
    })
    .option('status', {
      describe: 'Instead of reaping, dump a listing of builds and their container, PR, and branch information',
      alias: 's',
    })
    .option('dryrun', {
      describe: 'Only perform a dry run and list containers to be deleted, but don\'t delete them.',
      type: 'boolean',
      default: true,
    })
    .option('outputFormat', {
      describe: 'Specify output format. Options are "json" and "text" (currently only affects build output).',
      default: 'text',
      alias: ['output', 'o'],
    })
    .argv;

loader.addSchema({
  dryrun: Boolean,
  status: Boolean,
});

loader.add(path.resolve(path.join(__dirname, '..', 'defaults.yaml')), {allowedKeys: true});
if (argv.config) {
  argv.config = Array.isArray(argv.config) ? argv.config : [argv.config];
  argv.config.forEach(function(file) {
    loader.addFile(path.resolve(file));
  });
}
loader.addAndNormalizeObject(process.env);
loader.addAndNormalizeObject(argv);

loader.load(function(err, config) {
  if (err) {
    console.error(err);
    throw err;
  }

  reaper.run(config);
});
